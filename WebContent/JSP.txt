* JSP 2.3 & Servlet 3.1

html - 정적 데이터만 사용 가능, 동적인 데이터 처리 불가능

 - 정적 데이터 (자원/리소스) : 크게 변화가 없는 고정된 데이터 (HTML, CSS, JavaScript, 이미지...)
 	=> 웹서버 처리(Web Server)  (DB에 대한 동작 처리 못 함)
 - 								동적 데이터 (자원/리소스) : 변화하는 데이터 (JSP, PHP, ASP, ...)
 	=> WAS(Web Application Server) 처리   (DB에 대한 동작 처리 가능)
 	
 	    * 우리가 사용한 Application은 자바,  WAS / 웹 서버는 Apache tomcat  (Apache가 서버 이름임!)
 	    
 
 
 
 
 
 
 ASP (.Net) - C# 기반
 
 PHP - C기반
 
 JSP - java 기반
 
 Servlet => Server + Applet(자바코드를 웹에 사용 가능하게 한 것)
web.xml (배포서술자)






* JSP 구성요소(150p~)

1) JSP 지시어(Directive) : JSP 파일에서 실행할 때 필요한 옵션 설정

	<%@ page ..... %>
	<%@ include ..... %>
	<%@ taglib ..... %>

2) JSP 스크립트요소 
  - 선언문(Declaration)
	=> 멤버변수 / 멤버메서드를 선언 공간
	<%!
		// 멤버변수
		int age = 10;
	
		// 멤버 메서드
		public void method() {
			...
		}
	 %>

  - 스크립틀릿 (Scriptlet)
  	=> 지역변수의 형태로 HTML 코드를 구현 가능한 공간, JSP 코드 사용
  	<%
  		.... 실행문;
  	%>
  	
  - 표현식 (Expression) : 선언문/스크립틀릿에 만들어 놓은 값을 화면에 출력하는 코드
  	<%= 변수/연산/메서드() %>
  	
  	
  	
  	
  	
	클래스(틀) - 객체(물건)
	-> 객체 대상을 만들기 위한 틀이 클래스다.
	=> 클래스/객체 왜 ?

	"데이터" => 변수
	"실행문" => 메서드
	변수+메서드 => 클래스
	
	* 클래스는 사용자 정의 타입
  	
  	
  	
  	
  	
  	
 p245~
	자바빈(JavaBean) 설계규악
	1) 패키지가 있어야함 (기본패키지X)
	2) 기본 생성자 필요
	3) 멤버변수의 접근지정자는 private
 	4) set(), get() 메서드 구현 - public
 	
 	
 	
 	
 	
 	* try ~ catch 구문
 	=> 예외처리구문 : 시스템이 비정상적인 종료를 하지 않도록 도와줌
 	* 자바에서 예외(상황)는 객체로 처리 => 예외를 던지다
 	
 	try{
 		에러가 발생 할지도 모르는 코드 작성
 		( 외부 시스템과의 연결 -DB연결, IO처리 )
		
 	}catch(Exception e){
 		에러 발생시 대처코드 => 메세지 출력
 	}finally{
 		예외 발생 유무와 상관없이 한 번만 실행하는 블럭
 		(자원 해제)
 	}
 
 
 
 
 
 
 ArrayList -> 가변길이 배열
	 데이터 저장
	 arr.add(데이터);
	 arr.add(인덱스, 데이터);
	 
	 데이터 사용
	 arr.get(인덱스);
	 
	 이름 -> 컬럼 => 변수
	 1명의 정보 -> 행 => 객체(MemberBean)
	 N명의 정보 -> N 행 => 객체 X N개 (한 번에 리턴 불가능)
	 
	 * 동일한 형태의 데이터 저장 => 가변길이 배열
	 
	 | MemberBean | MemberBean | MemberBean |
	 		0			1				2
	 		
	 * 배열의 한 칸에 MemberBean 객체 하나씩 저장
	 
	 
	 
	 
	
---------------------------------------------------------------------------
 게시판 (board)


 글쓰기 (C) -> 글쓴이, 제목, 내용.....
 글 목록 (R) -> 글번호, 제목, 조회수, 작성일, ip .... 
 글 본문 (R) -> 글쓴이, 제목, 내용, 댓글
 글 수정 (U)
 글 삭제 (D)
 답글 쓰기 (C)
 
 => DB 테이블 생성
 
 
 
 
 
 
 * 커넥션 풀 : 연결정보를 pool에 저장
 
 https://commons.apache.org/
 
 commons-collections4-4.4.jar
 commons-pool2-2.11.1.jar
 commons-dbcp2-2.9.0.jar 

 1) 컨테이너 안에는 1개의 연결정보 사용
 2) 백터( Vector ) 형태와 같은 pool을 사용
 3) 연결정보의 개수를 제한
 4) 사용이 끝난 경우 관리자가 자원 관리(회수)

  1. 웹브라우저 요청 (DB연결)
  2. 할당 가능한 커넥션 객체가 있는지 체크
  3. 커넥션 객체가 있을 때
  	4. 커넥션 객체 할당
  	5. 커넥션 객체 사용
  	6. 커넥션 객체 반환
  	
  3-1. 커넥션 객체가 없을 때 
  	4. 커넥션 객체가 리턴될 때 까지 대기, 임시 객체 생성
 
 
  	
 [ context.xml ]
 <Context> 내 프로젝트
	<Resource		//DB연결에 필요한 리소스(정보)
		name=""		외부에서 해당 리소스를 호출하는 이름
		auth=""		인증값(자원관리자 설정) - Application/Container 
		type=""		웹 페이지에서 리소스를 사용할 때 처리되는 클래스
		driverClassName=""	디비 연결에 필요한 드라이버
		username=""			디비 아이디
		password=""			디비 비밀번호
		url=""				디비 연결주소
		maxWait=""			커넥션 회수 대기시간(ms)
	/>
</Context>
 
 
 
 [ web.xml ]
   	<description> 리소스의 설명 </description>
  	<res-ref-name> context.xml 파일 리소스의 name </res-ref-name>
  	<res-type> context.xml 파일 리소스의 type </res-type>
  	<res-auth> context.xml 파일 리소스의 auth </res-auth>
  	
  	
  	
  	
  	
  p305
  http://www.servlets.com/
  
  // 파일 업로드 객체
	MultipartRequest multi 
			= new MultipartRequest(
					request 내장객체 (파라메터, 파일정보),
					업로드 위치(가상경로) (uploadPath),
					업로드 파일의 크기 (size),
					업로드시 인코딩처리, ("UTF-8"),
					중복된 파일이름 업로드시 처리 객체 ( new DefaultFileRenamePolicy() )
					    -> 중복된 이름 넣으면 이름 뒤에 (1) 이런식으로 붙이는거
					);
